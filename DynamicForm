Creating dynamic forms in Angular involves using `FormGroup`, `FormArray`, and `FormBuilder` to manage the structure and controls of the form dynamically. This approach is highly flexible and allows you to add or remove form controls at runtime based on user interactions.

### Example: Dynamic Form with Angular Reactive Forms

Hereâ€™s a step-by-step guide to creating a dynamic form where users can add and remove controls dynamically.

### 1. **Setup Reactive Forms**

Ensure you have imported the necessary modules.

**app.module.ts:**
```typescript
import { NgModule } from '@angular/core';
import { ReactiveFormsModule } from '@angular/forms';
import { BrowserModule } from '@angular/platform-browser';
import { AppComponent } from './app.component';

@NgModule({
  declarations: [
    AppComponent
  ],
  imports: [
    BrowserModule,
    ReactiveFormsModule // Import ReactiveFormsModule
  ],
  providers: [],
  bootstrap: [AppComponent]
})
export class AppModule { }
```

### 2. **Creating the Dynamic Form**

Define the form model in the component class using `FormGroup`, `FormArray`, `FormControl`, and `FormBuilder`.

**app.component.ts:**
```typescript
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, FormArray, Validators } from '@angular/forms';

@Component({
  selector: 'app-root',
  templateUrl: './app.component.html',
  styleUrls: ['./app.component.css']
})
export class AppComponent {
  dynamicForm: FormGroup;

  constructor(private fb: FormBuilder) {
    this.dynamicForm = this.fb.group({
      name: ['', Validators.required],
      email: ['', [Validators.required, Validators.email]],
      skills: this.fb.array([]) // Initialize the form array
    });
  }

  get skills(): FormArray {
    return this.dynamicForm.get('skills') as FormArray;
  }

  createSkill(): FormGroup {
    return this.fb.group({
      skill: ['', Validators.required],
      experience: ['', Validators.required]
    });
  }

  addSkill() {
    this.skills.push(this.createSkill());
  }

  removeSkill(index: number) {
    this.skills.removeAt(index);
  }

  onSubmit() {
    if (this.dynamicForm.valid) {
      console.log('Form Submitted', this.dynamicForm.value);
    } else {
      console.log('Form Not Valid');
    }
  }
}
```

### 3. **Creating the Template**

Bind the form model to the template using Angular directives, and provide controls to add and remove skills dynamically.

**app.component.html:**
```html
<form [formGroup]="dynamicForm" (ngSubmit)="onSubmit()">
  <label for="name">Name</label>
  <input id="name" formControlName="name">
  <div *ngIf="dynamicForm.get('name').invalid && dynamicForm.get('name').touched">
    <small *ngIf="dynamicForm.get('name').errors.required">Name is required.</small>
  </div>

  <label for="email">Email</label>
  <input id="email" formControlName="email">
  <div *ngIf="dynamicForm.get('email').invalid && dynamicForm.get('email').touched">
    <small *ngIf="dynamicForm.get('email').errors.required">Email is required.</small>
    <small *ngIf="dynamicForm.get('email').errors.email">Enter a valid email.</small>
  </div>

  <div formArrayName="skills">
    <div *ngFor="let skill of skills.controls; let i = index" [formGroupName]="i">
      <label for="skill">Skill {{ i + 1 }}</label>
      <input id="skill" formControlName="skill">
      <div *ngIf="skills.at(i).get('skill').invalid && skills.at(i).get('skill').touched">
        <small *ngIf="skills.at(i).get('skill').errors.required">Skill is required.</small>
      </div>

      <label for="experience">Experience</label>
      <input id="experience" formControlName="experience">
      <div *ngIf="skills.at(i).get('experience').invalid && skills.at(i).get('experience').touched">
        <small *ngIf="skills.at(i).get('experience').errors.required">Experience is required.</small>
      </div>

      <button type="button" (click)="removeSkill(i)">Remove Skill</button>
    </div>
  </div>

  <button type="button" (click)="addSkill()">Add Skill</button>
  <button type="submit" [disabled]="dynamicForm.invalid">Submit</button>
</form>
```

### 4. **Explanation**

- **Form Initialization**: The form is initialized with a `FormGroup` containing `name`, `email`, and an empty `FormArray` for skills.
- **Dynamic Control Creation**: The `createSkill` method returns a new `FormGroup` for a skill, which includes `skill` and `experience` form controls.
- **Adding/Removing Controls**: The `addSkill` method pushes a new skill form group into the `skills` array, and the `removeSkill` method removes a skill form group from the array.
- **Form Submission**: The `onSubmit` method handles form submission, checking if the form is valid before logging the form values.

### Summary

This guide demonstrates how to create a dynamic form in Angular using Reactive Forms. The key elements include:

- Setting up the form model using `FormGroup`, `FormArray`, and `FormBuilder`.
- Dynamically adding and removing form controls based on user interactions.
- Binding the form model to the template using Angular directives.
- Handling form submission and validation.

This approach is highly flexible and can be adapted for various use cases where dynamic forms are required.
